{"version":3,"file":"507f464a966a8359428a.js","mappings":"gjCAEMA,EAAAA,WAEF,cAAc,eACVC,KAAKC,OAAS,GACdD,KAAKE,WAAa,KAClBF,KAAKG,WAAa,K,mEAGtB,WAAgBF,EAAQC,EAAYC,GAApC,4BA+CaC,EAWMC,EA1DnB,kHA0DI,mGACQC,EAA4B,MAAjBC,EACfA,EAAgBC,EAAOC,UAAU,MAAQC,GACzB,GAAZJ,EAHR,iDAKiCC,GALjC,mFAM6B,kBADFI,EAL3B,SAMuBA,GACHT,EAAWU,aAAaC,UAAU,wBAClB,aAATF,EAAGA,IACVH,EAAOM,gBAAgB,OAAOC,EAAY,CAACJ,GAAG,YAAaK,QAAQ,EAAMN,IAAKA,IATlG,wbA1DJ,uBA0DmBL,EA1DnB,2CA+CaD,EA/Cb,WAgDQa,EAAAA,EAAAA,YAA4Bf,EAAWgB,QAAQC,KAAKC,aAAelB,EAAU,KAAW,4BAA6B,CAAED,OAAQ,CAACoB,IAAK,IAAIC,MAAQC,YAAjJ,mCAA8J,WAAOC,GAAP,wEAC1JT,EAAcS,EAAKT,YADuI,SAEpJU,QAAQC,IAAI,CACdlB,EAAOmB,OAAO,QAAQ,CAACC,KAAMJ,EAAKI,KAAMC,WAAYA,EAAYd,YAAaS,EAAKT,cAClFP,EAAOsB,SAAS,gBAAgBC,SAJsH,OAM1J1B,IAN0J,2CAA9J,wDA/CJL,KAAKC,OAASA,EACdD,KAAKE,WAAaA,EAClBF,KAAKG,WAAaA,EAEZO,EAAMV,KAAKE,WAAW8B,YAAYC,SAEpCC,EAAgB,CAChBC,gBAAiB,EACjBC,SAAUnC,EAAOmC,SACjBC,KAAMpC,EAAOoC,KACbC,cAAe,8BAGA,IAAfrC,EAAOsC,OACPL,EAAcK,KAAOC,SAASvC,EAAOsC,OAGpB,GAAjBtC,EAAOwC,SACPP,EAAcO,QAAS,GAGvBC,EAAgBC,EAAQ,MAExBnC,EAASkC,EAAcE,OAAOV,GAE9BL,EAAa,MAAQnB,EACrBK,EAAcf,KAAKE,WAAWa,YAC9BR,EAAgB,KA5BxB,UA8BuBC,EAAOsB,SAAS,WAAWC,OA9BlD,eA+Bec,iBACPxC,IACAH,EAAWgB,QAAQC,KAAK2B,gBAAiB,GAEzC1C,IAnCR,kCAuCgCI,EAAOsB,SAAS,mBAvChD,4FAwCY1B,IAxCZ,4b,sDAREL,GAuFAgD,EAAa,IAAIhD","sources":["webpack://LiveHelperChat/./src/util/nodeJSChat.js"],"sourcesContent":["import {helperFunctions} from '../lib/helperFunctions';\n\nclass _nodeJSChat {\n\n    constructor() {\n        this.params = {};\n        this.attributes = null;\n        this.chatEvents = null;\n    }\n\n    async setParams(params, attributes, chatEvents) {\n        this.params = params;\n        this.attributes = attributes;\n        this.chatEvents = chatEvents;\n\n        const vid = this.attributes.userSession.getVID();\n\n        var socketOptions = {\n            protocolVersion: 1,\n            hostname: params.hostname,\n            path: params.path,\n            authTokenName: 'socketCluster.authToken_vi'\n        }\n\n        if (params.port != '') {\n            socketOptions.port = parseInt(params.port);\n        }\n\n        if (params.secure == 1) {\n            socketOptions.secure = true;\n        }\n\n        var socketCluster = require(\"socketcluster-client\");\n\n        var socket = socketCluster.create(socketOptions);\n\n        var chanelName = 'uo_' + vid;\n        var instance_id = this.attributes.instance_id;\n        var sampleChannel = null;\n\n        let status = await socket.listener('connect').once();\n        if (status.isAuthenticated) {\n            connectSiteVisitor();\n            attributes.LHC_API.args.check_messages = false;\n        } else {\n            authentificate();\n        }\n\n        try {\n            for await (let event of socket.listener('deauthenticate')) {\n                authentificate();\n            }\n        } catch (e) {\n            // shut up old browers\n        }\n\n\n        function authentificate() {\n            helperFunctions.makeRequest(attributes.LHC_API.args.lhc_base_url + attributes['lang'] + \"nodejshelper/tokenvisitor\", { params: {ts: (new Date()).getTime()}}, async (data) => {\n                instance_id = data.instance_id;\n                await Promise.all([\n                    socket.invoke('login',{hash: data.hash, chanelName: chanelName, instance_id: data.instance_id}),\n                    socket.listener('authenticate').once()\n                ]);\n                connectSiteVisitor();\n            })\n        }\n\n        async function connectSiteVisitor() {\n            var firstRun = sampleChannel == null;\n            sampleChannel = socket.subscribe('uo_' + vid);\n            if (firstRun == true) {\n                try {\n                    for await (let op of sampleChannel) {\n                        if (op.op == 'check_message') {\n                            attributes.eventEmitter.emitEvent('checkMessageOperator');\n                        } else if (op.op == 'is_online') {\n                            socket.transmitPublish('ous_'+instance_id,{op:'vi_online', status: true, vid: vid});\n                        }\n                    }\n                } catch (e){\n                    // shut up old browsers\n                }\n            }\n        }\n\n    }\n}\n\nconst nodeJSChat = new _nodeJSChat();\nexport {nodeJSChat};\n\n"],"names":["_nodeJSChat","this","params","attributes","chatEvents","authentificate","connectSiteVisitor","firstRun","sampleChannel","socket","subscribe","vid","op","eventEmitter","emitEvent","transmitPublish","instance_id","status","helperFunctions","LHC_API","args","lhc_base_url","ts","Date","getTime","data","Promise","all","invoke","hash","chanelName","listener","once","userSession","getVID","socketOptions","protocolVersion","hostname","path","authTokenName","port","parseInt","secure","socketCluster","require","create","isAuthenticated","check_messages","nodeJSChat"],"sourceRoot":""}