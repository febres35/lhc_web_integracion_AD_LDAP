{"version":3,"file":"a68fc3eccb8af7392e9f.js","mappings":"wNA6FMA,EAAqB,IA1FrBC,WACF,cAAc,eACVC,KAAKC,OAAS,GACdD,KAAKE,mBAAqB,KAC1BF,KAAKG,gBAAkB,KACvBH,KAAKI,WAAa,KAClBJ,KAAKK,WAAa,E,uDAGtB,WAA2B,WACvB,GAAIL,KAAKC,OAAL,eAA+B,CAE/B,IAAIK,EAAe,WACf,EAAKC,wBAGLP,KAAKC,OAAL,cACAO,EAAAA,EAAAA,OAAwBC,OAAQ,YAAaH,EAAc,mBAC3DE,EAAAA,EAAAA,OAAwBE,SAAU,YAAaJ,EAAc,oBAGjEE,EAAAA,EAAAA,OAAwBC,OAAQ,YAAaH,EAAc,iBAC3DE,EAAAA,EAAAA,OAAwBC,OAAQ,QAASH,EAAc,aACvDE,EAAAA,EAAAA,OAAwBC,OAAQ,SAAUH,EAAc,cACxDE,EAAAA,EAAAA,OAAwBC,OAAQ,WAAYH,EAAc,gBAC1DE,EAAAA,EAAAA,OAAwBC,OAAQ,OAAQH,EAAc,YACtDE,EAAAA,EAAAA,OAAwBE,SAAU,SAAUJ,EAAc,cAC1DE,EAAAA,EAAAA,OAAwBE,SAAU,aAAcJ,EAAc,kBAC9DE,EAAAA,EAAAA,OAAwBE,SAAU,WAAYJ,EAAc,gBAE5DN,KAAKO,0B,kCAIb,WAAuB,WACfI,EAAiC,GAAnBX,KAAKK,WAEvBL,KAAKK,WAAa,EAEC,GAAfM,GACAX,KAAKY,eAAe,GAGxBC,aAAab,KAAKG,iBAElBH,KAAKG,gBAAkBW,YAAW,WAC9B,EAAKT,WAAa,EAClB,EAAKO,eAAe,KACrB,O,uBAGP,SAAUX,EAAQG,GACdJ,KAAKC,OAASA,EACdD,KAAKI,WAAaA,EAClBJ,KAAKe,2BACLf,KAAKgB,mB,4BAGT,WAAiB,WACbH,aAAab,KAAKE,oBAClBF,KAAKE,mBAAqBY,YAAW,WACjC,EAAKF,eAAe,GACpB,EAAKI,mBACmB,IAAzBhB,KAAKC,OAAL,W,4BAGP,SAAegB,GAAQ,WACbC,EAAalB,KAAKI,WAAL,YAA+Be,uBAE9ClB,EAAS,CACT,IAAOD,KAAKI,WAAWgB,YAAYC,SACnC,MAAUrB,KAAKI,WAAWkB,aAAaC,MAAQ,EAAI,EACnD,QAAWN,EACX,OAAUjB,KAAKK,WACf,IAAOL,KAAKI,WAAWoB,WAAWC,KAAK,MAGvCP,EAAU,IAAUA,EAAU,OAC9BjB,EAAM,KAAWiB,EAAU,GAAS,IAAMA,EAAU,MAGxDQ,EAAAA,EAAAA,YAA4B1B,KAAKI,WAAWuB,QAAQC,KAAKC,aAAe7B,KAAKI,WAAL,KAA0B,gCAAiC,CAACH,OAAQA,IAAS,SAAC6B,GACxH,GAAtBA,EAAKC,eAAyB,EAAK3B,WAAW4B,aAAaT,OAASO,EAAKG,QACzE,EAAK7B,WAAW4B,aAAaE,KAAKJ,EAAKG,e,EAnFjDlC","sources":["webpack://LiveHelperChat/./src/util/activityMonitoring.js"],"sourcesContent":["import {domEventsHandler} from '../util/domEventsHandler';\nimport {helperFunctions} from '../lib/helperFunctions';\n\nclass _activityMonitoring {\n    constructor() {\n        this.params = {};\n        this.timeoutStatuscheck = null;\n        this.timeoutActivity = null;\n        this.attributes = null;\n        this.userActive = 1;\n    }\n\n    attatchActivityListeners() {\n        if (this.params['track_activity']) {\n\n            var resetTimeout = () => {\n                this.resetTimeoutActivity();\n            };\n\n            if (this.params['track_mouse']) {\n                domEventsHandler.listen(window, 'mousemove', resetTimeout, 'lhc_mousemove_w');\n                domEventsHandler.listen(document, 'mousemove', resetTimeout, 'lhc_mousemove_d');\n            }\n\n            domEventsHandler.listen(window, 'mousedown', resetTimeout, 'lhc_mousedown');\n            domEventsHandler.listen(window, 'click', resetTimeout, 'lhc_click');\n            domEventsHandler.listen(window, 'scroll', resetTimeout, 'lhc_scroll');\n            domEventsHandler.listen(window, 'keypress', resetTimeout, 'lhc_keypress');\n            domEventsHandler.listen(window, 'load', resetTimeout, 'lhc_load');\n            domEventsHandler.listen(document, 'scroll', resetTimeout, 'lhc_scroll');\n            domEventsHandler.listen(document, 'touchstart', resetTimeout, 'lhc_touchstart');\n            domEventsHandler.listen(document, 'touchend', resetTimeout, 'lhc_touchend');\n\n            this.resetTimeoutActivity();\n        }\n    }\n\n    resetTimeoutActivity() {\n        var wasInactive = this.userActive == 0;\n\n        this.userActive = 1;\n\n        if (wasInactive == true) {\n            this.syncUserStatus(1);\n        }\n\n        clearTimeout(this.timeoutActivity);\n\n        this.timeoutActivity = setTimeout(() => {\n            this.userActive = 0;\n            this.syncUserStatus(1);\n        }, 300 * 1000);\n    }\n\n    setParams(params, attributes) {\n        this.params = params;\n        this.attributes = attributes;\n        this.attatchActivityListeners();\n        this.initMonitoring();\n    }\n\n    initMonitoring() {\n        clearTimeout(this.timeoutStatuscheck);\n        this.timeoutStatuscheck = setTimeout(() => {\n            this.syncUserStatus(0);\n            this.initMonitoring();\n        }, this.params['timeout'] * 1000);\n    }\n\n    syncUserStatus(sender) {\n        const chatParams = this.attributes['userSession'].getSessionAttributes();\n\n        let params = {\n            'vid': this.attributes.userSession.getVID(),\n            'wopen': (this.attributes.widgetStatus.value ? 1 : 0),\n            'uaction': sender,\n            'uactiv': this.userActive,\n            'dep': this.attributes.department.join(',')\n        };\n\n        if (chatParams['id'] && chatParams['hash']) {\n            params['hash'] = chatParams['id'] + '_' + chatParams['hash'];\n        }\n\n        helperFunctions.makeRequest(this.attributes.LHC_API.args.lhc_base_url + this.attributes['lang'] + 'widgetrestapi/chatcheckstatus', {params: params}, (data) => {\n            if (data.change_status == true && this.attributes.onlineStatus.value != data.online) {\n                this.attributes.onlineStatus.next(data.online);\n            }\n        });\n    }\n\n}\n\nconst activityMonitoring = new _activityMonitoring();\nexport {activityMonitoring};"],"names":["activityMonitoring","_activityMonitoring","this","params","timeoutStatuscheck","timeoutActivity","attributes","userActive","resetTimeout","resetTimeoutActivity","domEventsHandler","window","document","wasInactive","syncUserStatus","clearTimeout","setTimeout","attatchActivityListeners","initMonitoring","sender","chatParams","getSessionAttributes","userSession","getVID","widgetStatus","value","department","join","helperFunctions","LHC_API","args","lhc_base_url","data","change_status","onlineStatus","online","next"],"sourceRoot":""}