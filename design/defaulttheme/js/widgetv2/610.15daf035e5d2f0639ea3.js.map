{"version":3,"file":"610.15daf035e5d2f0639ea3.js","mappings":"iVAYMA,GANLC,EAAAA,EAAAA,KAAQ,SAACC,GACN,MAAO,CACHC,WAAYD,EAAMC,cAFlB,e,6aAcJ,WAAYC,GAAO,yBACf,cAAMA,GADS,mBANX,CACJC,iBAAmB,KAOnB,EAAKC,eAAgB,EACrB,EAAKC,WAAa,KAHH,E,+CAMnB,SAAoBC,EAAGC,GACnB,GAAID,EAAEE,KAAKC,OAASF,EAAKG,OAAQ,CAC7B,IAAIC,EAAQ,GACZA,EAAML,EAAC,KAAD,OAAsBA,EAAC,KAAD,MAC5BM,KAAKC,SAASF,M,2BAItB,SAAcG,EAAOR,GAAG,WACpBS,KAAKC,MAAMF,EAAM,gBAAgBG,SAAQ,SAACV,GACtC,GAAmB,iBAAfA,EAAKW,OAA2B,CAChC,IAAIC,EAAMC,SAASC,cAAcd,EAAKG,QACtCS,GAAOA,EAAIG,UAAUC,IAAIhB,EAAKI,YAC3B,GAAmB,oBAAfJ,EAAKW,OAA8B,CAC1C,IAAIC,EAAMC,SAASC,cAAcd,EAAKG,QACtCS,GAAOA,EAAIG,UAAUE,OAAOjB,EAAKI,YAC9B,GAAmB,oBAAfJ,EAAKW,OACZO,OAAOC,QAAQnB,EAAKG,QAAUH,EAAKI,WAChC,GAAmB,aAAfJ,EAAKW,OAAuB,CACnC,IAAIS,EAAS,GACbA,EAAOpB,EAAKG,QAAUH,EAAKI,MAC3B,EAAKT,MAAM0B,eAAeD,OACJ,gBAAfpB,EAAKW,OACZE,SAASS,eAAetB,EAAKG,QAAQoB,cAAcC,YAAYxB,EAAKI,MAAM,KACpD,uBAAfJ,EAAKW,SACRO,OAAOO,iBAEPP,OAAOO,iBAAiB,WAAW,SAACC,GAAS,EAAKC,oBAAoBD,EAAI1B,MAAQ,GAC1EkB,OAAOU,YAEfV,OAAOU,YAAY,aAAa,SAACF,GAAS,EAAKC,oBAAoBD,EAAI1B,MAC/Da,SAASe,aAEjBf,SAASe,YAAY,aAAa,SAACF,GAAS,EAAKC,oBAAoBD,EAAI1B,Y,+BAMzF,WAC4B,OAApBK,KAAKP,aACL+B,EAAAA,EAAAA,IAAYxB,KAAKP,WAAYO,Q,oBAIrC,WAAS,WACDyB,EAAOzB,KAAKV,MAAMD,WAAWqC,MAAM,CAAC,UAAU1B,KAAKV,MAAMqC,OAU7D,OARK3B,KAAKV,MAAMsC,UACZH,EAAOA,EAAKI,QAAS,qCAAsC,KAG/D7B,KAAK8B,MAAMvC,iBAAiBc,SAAQ,SAAA0B,GAChCN,EAAOA,EAAKI,QAAQE,EAAKC,OAAQD,EAAKF,QAAS,OAI/C,gBAAC,WAAD,KACKzB,GAAAA,CAAMqB,EAAM,CACTI,QAAS,SAAAI,GACL,IAAIC,EAAYC,OAAOC,OAAO,GAAIH,EAAQI,SAC1C,GAAIJ,EAAQI,QAAS,CACjB,GAAIJ,EAAQK,MAAyB,WAAjBL,EAAQK,KACxB,OAAO,8BAAQC,KAAK,UAAaN,EAAQI,QAAlC,CAA2CG,QAAS,SAAC9C,GAAD,OAAO,EAAK+C,cAAcP,EAAWxC,OAAKgD,EAAAA,EAAAA,YAAWT,EAAQU,WACrH,GAAIV,EAAQK,MAAyB,cAAjBL,EAAQK,KAK/B,OAJ0B,GAAtB,EAAK9C,gBACL,EAAKiD,cAAcP,EAAW,MAC9B,EAAK1C,eAAgB,GAElB,GACJ,GAAIyC,EAAQK,MAAyB,WAAjBL,EAAQK,MAAqBL,EAAQI,QAAQ,mBAGpE,OAFA,EAAK5C,WAAawC,EAEX,gBAAC,WAAD,e,EA7F/B,CAMiBW,EAAAA,aAAAA,EAgGzB","sources":["webpack://LHCReactAPP/./src/components/CustomHTML.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { helperFunctions } from \"../lib/helperFunctions\";\nimport parse, { domToReact } from 'html-react-parser';\nimport { parseScript } from \"../actions/chatActions\";\n\n@connect((store) => {\n    return {\n        chatwidget: store.chatwidget\n    };\n})\n\nclass CustomHTML extends Component {\n\n    state = {\n        preg_match_rules : []\n    }\n\n\n\n    constructor(props) {\n        super(props);\n        this.listenerAdded = false;\n        this.js_execute = null;\n    }\n\n    handleParentMessage(e, item) {\n        if (e.data.event == item.target) {\n            let value = [];\n            value[e['data']['event']] = e['data']['value'];\n            this.setState(value);\n        }\n    }\n\n    abstractClick(attrs, e) {\n        JSON.parse(attrs['data-action']).forEach((item) => {\n            if (item.action == 'add_css_class') {\n                let elm = document.querySelector(item.target);\n                elm && elm.classList.add(item.value);\n            } else if (item.action == 'remove_css_class') {\n                let elm = document.querySelector(item.target);\n                elm && elm.classList.remove(item.value);\n            } else if (item.action == 'chat_attr_global') {\n                window.lhcChat[item.target] = item.value;\n            } else if (item.action == 'set_state') {\n                var params = {};\n                params[item.target] = item.value;\n                this.props.setStateParent(params);\n            } else if (item.action == 'post_message') {\n                document.getElementById(item.target).contentWindow.postMessage(item.value,'*');\n            } else if (item.action == 'listen_post_message') {\n                if (window.addEventListener) {\n                    // FF\n                    window.addEventListener(\"message\", (evt) => {this.handleParentMessage(evt,item)}, false);\n                } else if ( window.attachEvent ) {\n                    // IE\n                    window.attachEvent(\"onmessage\", (evt) => {this.handleParentMessage(evt,item)});\n                } else if ( document.attachEvent ) {\n                    // IE\n                    document.attachEvent(\"onmessage\", (evt) => {this.handleParentMessage(evt,item)});\n                };\n            }\n        });\n    }\n\n    componentDidMount() {\n        if (this.js_execute !== null) {\n            parseScript(this.js_execute, this);\n        }\n    }\n\n    render() {\n        let html = this.props.chatwidget.getIn(['chat_ui',this.props.attr]);\n\n        if (!this.props.has_new) {\n            html = html.replace( /<newmessages>(.*)<\\/newmessages>/gi, \"\");\n        }\n        \n        this.state.preg_match_rules.forEach(rule => {\n            html = html.replace(rule.search, rule.replace, \"\");\n        });\n\n        return (\n            <React.Fragment>\n                {parse(html, {\n                    replace: domNode => {\n                        var cloneAttr = Object.assign({}, domNode.attribs);\n                        if (domNode.attribs) {\n                            if (domNode.name && domNode.name === 'button') {\n                                return <button type=\"button\" {...domNode.attribs} onClick={(e) => this.abstractClick(cloneAttr, e)}>{domToReact(domNode.children)}</button>\n                            } else if (domNode.name && domNode.name === 'lhcaction') {\n                                if (this.listenerAdded == false) {\n                                    this.abstractClick(cloneAttr, null);\n                                    this.listenerAdded = true;\n                                }\n                                return \"\";\n                            } else if (domNode.name && domNode.name === 'script' && domNode.attribs['data-bot-action']) {\n                                this.js_execute = domNode;\n                                // Return empty element\n                                return <React.Fragment></React.Fragment>;\n                            }\n                        }\n                    }})}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default CustomHTML;"],"names":["CustomHTML","connect","store","chatwidget","props","preg_match_rules","listenerAdded","js_execute","e","item","data","event","target","value","this","setState","attrs","JSON","parse","forEach","action","elm","document","querySelector","classList","add","remove","window","lhcChat","params","setStateParent","getElementById","contentWindow","postMessage","addEventListener","evt","handleParentMessage","attachEvent","parseScript","html","getIn","attr","has_new","replace","state","rule","search","domNode","cloneAttr","Object","assign","attribs","name","type","onClick","abstractClick","domToReact","children","Component"],"sourceRoot":""}