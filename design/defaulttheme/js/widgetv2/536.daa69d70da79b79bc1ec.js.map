{"version":3,"file":"536.daa69d70da79b79bc1ec.js","mappings":"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","sources":["webpack://LHCReactAPP/./src/components/InlineSurvey.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { submitInlineSurvey } from \"../actions/chatActions\"\nimport { helperFunctions } from \"../lib/helperFunctions\";\nimport parse, { domToReact } from 'html-react-parser';\nimport { withTranslation } from 'react-i18next';\n\n@connect((store) => {\n    return {\n        chatwidget: store.chatwidget\n    };\n})\n\nclass InlineSurvey extends Component {\n\n    state = {\n        currentQuestion: 1,\n        is_valid: null,\n        collectedData: {}, // Holds questions data themself with post variables names matching standard one\n        collectedQuestion: [] // Holds information which questions were answered/entered\n    }\n\n    constructor(props) {\n        super(props);\n    }\n\n    abstractClick(attrs, attrsQuestion, e) {\n        var presentState = this.state.collectedData;\n        var collectedQuestion = this.state.collectedQuestion;\n        var validData = false;\n\n        if (attrs['data-inline'] == 'plain') {\n            if (e.target.value != '') {\n                validData = true;\n                presentState[attrs.name] = e.target.value;\n            }\n        } else {\n            validData = true;\n            presentState[attrs.name] = attrs.value;\n        }\n\n        if (validData === true && collectedQuestion.indexOf(attrsQuestion.seq) === -1) {\n            collectedQuestion.push(attrsQuestion.seq);\n        } else if (validData === false && collectedQuestion.indexOf(attrsQuestion.seq) !== -1) {\n            collectedQuestion.splice(collectedQuestion.indexOf(attrsQuestion.seq),1);\n        }\n\n        this.setState({'collectedData' : presentState, 'collectedQuestion': collectedQuestion});\n    }\n\n    submitSurvey() {\n        this.state.collectedData['survey_id'] = this.props.survey_id;\n        this.state.collectedData['chat_id'] = this.props.chatwidget.getIn(['chatData','id']);\n        this.state.collectedData['hash'] = this.props.chatwidget.getIn(['chatData','hash']);\n        submitInlineSurvey(this.state.collectedData).then((data) => {\n            var newState = {'is_valid': data.data.is_valid};\n                newState['feedback_text'] = data.data.result;\n\n            this.setState(newState);\n        })\n    }\n\n    render() {\n\n        const { t } = this.props;\n\n        var counter = 1;\n        var totalQuestions = 0;\n\n        domToReact(this.props.surveyOptions,{\n            replace: domNode => {\n                if (!domNode.attribs) {\n                    return;\n                }\n                if (domNode.name === 'voteoption') {\n                    totalQuestions++;\n                }\n            }\n        })\n\n        return (\n            <div>\n\n                {this.state.is_valid === false && parse(this.state.feedback_text, {\n                    replace: domNode => {\n                        if (domNode.attribs) {\n                            if (domNode.name && domNode.name === 'button') {\n                                return <button type=\"button\" {...domNode.attribs} onClick={(e) => this.setState({'is_valid':null})} />\n                            }\n                        }\n                    }})}\n                {this.state.is_valid === true && <div>\n                    {parse(this.state.feedback_text)}\n                </div>}\n\n                {this.state.is_valid !== true && domToReact(this.props.surveyOptions,{\n                    replace: domNode => {\n                        if (!domNode.attribs) {\n                            return;\n                        }\n\n                        if (domNode.name === 'voteoption') {\n\n                            let classNameItem = this.state.currentQuestion != counter ? 'd-none' : '';\n\n                            counter++;\n\n                            let disabledNext = domNode.attribs['is-required'] == 1 && this.state.collectedQuestion.indexOf(domNode.attribs.seq) === -1 ? true : false\n                            let classNameButtons = \"d-block pt-3\" + (totalQuestions == 1 ? ' text-center' : '');\n                            let classSubmitButton = \"btn btn-outline-secondary btn-sm\" + (totalQuestions > 1 ? ' float-end' : '') + ' btn-survey-submit';\n\n                            return <div {...domNode.attribs} className={classNameItem} >\n                                    {domToReact(domNode.children, {\n\n                                        replace: domNodeChild => {\n                                            if (!domNodeChild.attribs) {\n                                                return;\n                                            }\n\n                                            if (domNodeChild.name && domNodeChild.name === 'input' && domNodeChild.attribs.type && domNodeChild.attribs.type == 'radio') {\n                                                var cloneAttr = Object.assign({}, domNodeChild.attribs);\n                                                return <input type=\"radio\" {...domNodeChild.attribs} onChange={(e) => this.abstractClick(cloneAttr, domNode.attribs, e)} />\n                                            } else if (domNodeChild.name && domNodeChild.name === 'textarea') {\n                                                var cloneAttr = Object.assign({}, domNodeChild.attribs);\n                                                return <textarea style={{\"height\": \"55px\"}} {...domNodeChild.attribs} onChange={(e) => this.abstractClick(cloneAttr, domNode.attribs, e)}></textarea>\n                                            }\n                                        }\n\n                                    })}\n                                <div className={classNameButtons}>\n\n                                    {this.state.currentQuestion > 1 && <input type=\"button\" className=\"btn btn-outline-secondary btn-sm btn-survey-prev\" onClick={(e) => this.setState({'currentQuestion' : this.state.currentQuestion - 1})} value={t('button.back')}  name=\"Prev\"/>}\n\n                                    {totalQuestions > this.state.currentQuestion && <input disabled={disabledNext} type=\"button\" className=\"btn btn-outline-secondary btn-sm float-end btn-survey-next\" onClick={(e) => this.setState({'currentQuestion' : this.state.currentQuestion + 1})} value={t('button.next')}  name=\"Next\"/>}\n\n                                    {totalQuestions == this.state.currentQuestion && <input disabled={disabledNext} type=\"button\" className={classSubmitButton} onClick={(e) => this.submitSurvey()} value={t('button.submit')}  name=\"Submit\"/>}\n                                </div>\n                            </div>;\n                        }\n                    }\n                })}\n            </div>\n        );\n    }\n}\n\nexport default withTranslation()(InlineSurvey);"],"names":["InlineSurvey","connect","store","chatwidget","props","currentQuestion","is_valid","collectedData","collectedQuestion","attrs","attrsQuestion","e","presentState","this","state","validData","target","value","name","indexOf","seq","push","splice","setState","survey_id","getIn","submitInlineSurvey","then","data","newState","result","t","counter","totalQuestions","domToReact","surveyOptions","replace","domNode","attribs","parse","feedback_text","type","onClick","classNameItem","disabledNext","classNameButtons","classSubmitButton","className","children","domNodeChild","cloneAttr","Object","assign","onChange","abstractClick","style","disabled","submitSurvey","Component","withTranslation"],"sourceRoot":""}